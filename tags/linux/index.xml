<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Norwegian Wood</title>
    <link>/tags/linux/</link>
    <description>Recent content in linux on Norwegian Wood</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Jzh</copyright>
    <lastBuildDate>Sun, 24 Jul 2022 20:42:27 +0800</lastBuildDate><atom:link href="/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux实用操作之系统服务管理</title>
      <link>/posts/2022/07/system-service-management-of-linux-practical-operation/</link>
      <pubDate>Sun, 24 Jul 2022 20:42:27 +0800</pubDate>
      
      <guid>/posts/2022/07/system-service-management-of-linux-practical-operation/</guid>
      <description>systemctl指令  立即启动一个服务：systemctl start my.service 立即停止一个服务：systemctl stop my.service 重启一个服务：systemctl restart my.service 重新加载一个服务的配置文件：systemctl reload my.service 重载所有修改过的配置文件：systemctl daemon-reload 开启自启动服务：systemctl enable my.service 取消开启自启动：systemctl disable my.service 查看是否已经自启动：systemctl is-enabled my.service 查看服务运行状态：systemctl status my.service 查看所有服务：systemctl --type service  service和chkconfig指令  启动服务：service my.service start 终止服务：service my.service stop 重启服务：service my.service restart 查看服务运行状态：service my.service status 开启或取消开机自启动：chkconfig my.service on/off 查看开机自启动列表：chkconfig --list  Unit配置文件解释 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  - Unit - Description，服务的描述 - Requires，定义此unit需在哪个daemon启动后才能够启动 - Service - Type，定义启动时的进程行为。它有以下几种值。 - Type=simple，默认值，执行ExecStart指定的命令，启动主进程 - Type=forking，以 fork 方式从父进程创建子进程，创建后父进程会立即退出 - Type=oneshot，一次性进程，Systemd 会等当前服务退出，再继续往下执行 - Type=dbus，当前服务通过D-Bus启动 - Type=notify，当前服务启动完毕，会通知Systemd，再继续往下执行 - Type=idle，若有其他任务执行完毕，当前服务才会运行 - ExecStart，启动当前服务的命令 - ExecStartPre，启动当前服务之前执行的命令 - ExecStartPost，启动当前服务之后执行的命令 - ExecReload，重启当前服务时执行的命令 - ExecStop，停止当前服务时执行的命令 - ExecStopPost，停止当其服务之后执行的命令 - RestartSec，自动重启当前服务间隔的秒数 - Restart，定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog - TimeoutSec，定义 Systemd 停止当前服务之前等待的秒数 - Environment，指定环境变量 - Install - WantedBy，值是一个或多个Target，当前Unit激活(enable)时，符号链接会放入/etc/systemd/system目录下面以Target名+.</description>
    </item>
    
    <item>
      <title>Linux配置Mysql环境</title>
      <link>/posts/2022/07/configuring-mysql-environment-for-linux/</link>
      <pubDate>Sat, 23 Jul 2022 21:27:15 +0800</pubDate>
      
      <guid>/posts/2022/07/configuring-mysql-environment-for-linux/</guid>
      <description>安装mysql yum方式安装mysql 一、获取mysql的rpm包
可从地址：https://dev.mysql.com/downloads/repo/yum/
找到适合自己发行版本的rpm包下载。下面下载的是适用于CentOS7版本的。
1 2 3  [root@VM-0-11-centos ~]# wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm ...... 2022-01-02 12:07:24 (133 KB/s) - ‘mysql80-community-release-el7-3.noarch.rpm’ saved [26024/26024]   二、安装mysql的rpm包
1 2 3 4  [root@VM-0-11-centos ~]# rpm -Uvh mysql80-community-release-el7-3.noarch.rpm ...... Updating / installing... 1:mysql80-community-release-el7-3 ################################# [100%]   这时查看/etc/yum.repos.d即可以看到如下内容：
1 2 3  [root@VM-0-11-centos ~]# ls /etc/yum.repos.d | grep mysql mysql-community.repo mysql-community-source.repo   三、（可选）将mysql80换为mysql57
1 2 3 4 5 6 7 8  [root@VM-0-11-centos ~]# yum-config-manager --disable mysql80-community [root@VM-0-11-centos ~]# yum-config-manager --enable mysql57-community # 查看是否切换成功： [root@VM-0-11-centos ~]# yum repolist enabled | grep mysql mysql-connectors-community/x86_64 MySQL Connectors Community 221 mysql-tools-community/x86_64 MySQL Tools Community 135 mysql57-community/x86_64 MySQL 5.</description>
    </item>
    
    <item>
      <title>Wsl主要操作记录</title>
      <link>/posts/2022/07/wsl-main-operation-records/</link>
      <pubDate>Sat, 23 Jul 2022 17:34:52 +0800</pubDate>
      
      <guid>/posts/2022/07/wsl-main-operation-records/</guid>
      <description>wsl在window开机后自启ssh服务   wsl下创建脚本，执行：vim /etc/init.wsl，并根据需要写入服务：
1  /etc/init.d/${需要的服务} # 或者使用service/systemctl命令   再赋予init.wsl执行权限，执行：chmod +x /etc/init.wsl
  window下在启动目录下创建脚本：wsl.bat，写入开机命令如下：
1  wsl -d &amp;lt;DistributionName&amp;gt; -u root /etc/init.wsl   其中，版本通过wsl -l查看。
  wsl一些常用命令  wsl ~ -u jzh: 以jzh用户登录并进入用户文件夹 wsl --shutdown: 关闭wsl wsl -l -v: 查看已安装的wsl版本 wsl --status: 检查wsl状态 wsl -l --online: 查看可通过在线商店获得的 Linux 发行版列表  wsl修改默认登录用户 &amp;lt;DistributionName&amp;gt; config --default-user root: 将登录默认用户设为root
手动安装wsl的话可能无法生效，可通过修改/etc/wsl.conf完成：
1 2 3  # Set the user when launching a distribution with WSL.</description>
    </item>
    
    <item>
      <title>Wsl自定义安装位置</title>
      <link>/posts/2022/07/wsl-custom-installation-location/</link>
      <pubDate>Sat, 23 Jul 2022 17:27:31 +0800</pubDate>
      
      <guid>/posts/2022/07/wsl-custom-installation-location/</guid>
      <description>自定义wsl安装位置 下载wsl-ubuntu：  20.04版本：https://aka.ms/wslubuntu2004 18.04版本：https://aka.ms/wsl-ubuntu-1804  其他版本自行前往官网查找。
修改后缀名 下载后得到AppxBundle文件，将后缀名改为zip，然后解压。
解压后得到如下内容：
选择x64或ARM64的安装包均可均可，将后缀名改为zip，然后解压。
开始安装wsl-ubuntu 解压后得到如下内容：
双击ubuntu.exe，即可开始安装wsl-ubuntu。
安装完成后在该目录下得到虚拟盘：
注：虚拟盘也可能变成rootfs文件。
登录wsl 安装时会让你指定用户名和密码，这个用户是默认添加到sudoers里的。
如果想用root登录，通过sudo passwd root可以设置root密码（root刚开始没有密码），接着通过su即可登录root。
From My Blog: akynazh.
Over.</description>
    </item>
    
    <item>
      <title>Linux实用操作之权限管理</title>
      <link>/posts/2021/12/permission-management-of-linux-practical-operation/</link>
      <pubDate>Mon, 20 Dec 2021 10:15:34 +0800</pubDate>
      
      <guid>/posts/2021/12/permission-management-of-linux-practical-operation/</guid>
      <description>添加用户 1 2 3 4 5 6 7 8 9  [root@VM-0-11-centos ~]# useradd jzh [root@VM-0-11-centos /]# id jzh uid=1000(jzh) gid=1000(jzh) groups=1000(jzh) [root@VM-0-11-centos /]# grep jzh /etc/passwd /etc/shadow /etc/group /etc/passwd:jzh:x:1000:1000::/home/jzh:/bin/bash /etc/shadow:jzh:!!:18980:0:99999:7::: /etc/group:jzh:x:1000:   x指代密码，对应到shadow中，未设定即为“!!”
设置密码 在进行useradd后密码还未设定。
1 2 3 4 5 6  [root@VM-0-11-centos /]# passwd jzh Changing password for user jzh. New password: BAD PASSWORD: The password is shorter than 8 characters Retype new password: passwd: all authentication tokens updated successfully.</description>
    </item>
    
    <item>
      <title>Linux实用操作之流程控制</title>
      <link>/posts/2021/12/process-control-of-linux-practical-operation/</link>
      <pubDate>Thu, 09 Dec 2021 20:33:45 +0800</pubDate>
      
      <guid>/posts/2021/12/process-control-of-linux-practical-operation/</guid>
      <description>读取输入  read -a variable_name 读取数组”array”  1 2 3 4 5 6  [root@VM-0-11-centos tmp]# read -a arr 1 2 3 4 5 [root@VM-0-11-centos tmp]# echo ${arr[0]} 1 [root@VM-0-11-centos tmp]# echo ${arr[4]} 5    read -p “prompt words” variable_name read -n limit_length variable_name  1 2 3  [root@VM-0-11-centos tmp]# read -n 5 kk words[root@VM-0-11-centos tmp]# echo $kk words    read -s variable_name “silent”输入不显示 read -t time variable_name “time”限定时间输入  条件判断语句 if else 1 2 3 4 5 6 7 8 9  if [] then do something elif [] then do something else do something fi   case 1 2 3 4 5 6 7 8 9 10 11  case ${var} in &amp;#34;condition1&amp;#34;) do something ;; &amp;#34;condition2&amp;#34;) do something ;; *) #anything do something ;; esac   循环语句 while 1 2 3 4  while [condition] do do something done   when meet the condition, start the loop.</description>
    </item>
    
    <item>
      <title>Linux实用操作之文本操作</title>
      <link>/posts/2021/12/text-operation-of-linux-practical-operation/</link>
      <pubDate>Sun, 05 Dec 2021 00:20:09 +0800</pubDate>
      
      <guid>/posts/2021/12/text-operation-of-linux-practical-operation/</guid>
      <description>使用grep抓取期望的结果 在过去登录主机的人中截取登录信息含root的行信息
1  last | grep &amp;#39;root&amp;#39;   比较重要，记忆：
grep [-acinv] [&amp;ndash;color=auto] &amp;lsquo;搜寻字串&amp;rsquo; filename
选项与参数：
-a ：将 binary 文件以 text 文件的方式搜寻数据
-c ：计算找到 &amp;lsquo;搜寻字串&amp;rsquo; 的次数
-i ：忽略大小写的不同，所以大小写视为相同
-n ：顺便输出行号
-v ：反向选择，亦即显示出没有 &amp;lsquo;搜寻字串&amp;rsquo; 内容的那一行
&amp;ndash;color=auto ：可以将找到的关键字部分加上颜色的显示喔
awk命令操作文本  格式化输出：以tab隔开打印前五行中每行的第一和第三个字符  awk &amp;lsquo;{[pattern] action}&amp;rsquo; {filenames}
1  last -n 5 | awk &amp;#39;{print $1 &amp;#34;\t&amp;#34; $3}&amp;#39;   注意必须是内双引号外单引号的形式。
 分隔字符  awk -F #-F指定所操作文件中的目标分割字符
使用&amp;quot;,&amp;ldquo;分隔
1  awk -F, &amp;#39;{print $1 &amp;#34; - &amp;#34; $2}&amp;#39; log.</description>
    </item>
    
    <item>
      <title>Linux上部署JAR包项目后的文件上传问题</title>
      <link>/posts/2021/11/file-upload-problem-after-deploying-jar-package-project-on-linux/</link>
      <pubDate>Wed, 03 Nov 2021 00:38:12 +0800</pubDate>
      
      <guid>/posts/2021/11/file-upload-problem-after-deploying-jar-package-project-on-linux/</guid>
      <description>在进行上传文件时，一般会先获取项目类路径：
1 2  File relativePathFile = new File(URLDecoder.decode(ResourceUtils.getURL(&amp;#34;classpath:&amp;#34;).getPath(), &amp;#34;utf-8&amp;#34;)); String absolutePath = relativePathFile.getAbsoluteFile().getPath();   首先取得相对路径，再进一步取得绝对路径，结果如下：
 如果单纯运行一个java项目：  获得路径为：
${project}/target/classes
 如果是运行jar包，且是在Linux系统上，则获得路径大致为：  .../${jar包名}!/BOOT-INF/classes! [centos7.9下]
所以如果是jar包启动并上传文件，则无法正确放到类路径下。
所以需指定新的上传路径。
在如下路径中：
1 2  [root@VM-0-11-centos app]# ls application.yaml LonersHub-0.0.1-SNAPSHOT.jar static   假设我要把文件上传到和jar包同一路径下的static内, 可以在jar包同一路径下新建并编辑application.yaml文件如下：
1 2 3 4 5  spring: resources: static-locations: - classpath:static/ - file:/app/static/   然后在文件上传是指定上传路径即可。
这里编写一个工具类如下：
关注getUploadPath方法，它用于获取上传路径。
首先，为了方便后期维护和部署使用，我们先判断项目运行所在的操作系统，如果是生产环境linux则上传到上面指定的目录，而如果是本地测试项目，则将其上传到类路径下的默认位置即可。
比如，要上传一个头像：
 linux下：  返回/app/static/${uploadType}/${fileName}
e.g. /app/static/avatar/test.jpg
 window下：  返回 ${project}/target/classes/static/${uploadType}/${fileName}</description>
    </item>
    
    <item>
      <title>Linux主机部署springboot项目全过程</title>
      <link>/posts/2021/11/the-whole-process-of-linux-host-deployment-springboot-project/</link>
      <pubDate>Wed, 03 Nov 2021 00:30:25 +0800</pubDate>
      
      <guid>/posts/2021/11/the-whole-process-of-linux-host-deployment-springboot-project/</guid>
      <description>注：部署环境为centos7.9版本
操作步骤如下：
 配置Java环境 配置mysql环境 配置redis环境 生成，上传并运行JAR包项目  配置Java环境 前往：Linux配置Java环境
配置mysql环境   配置mysql环境，前往：Linux配置Mysql环境
  建立数据库并新建表，可通过sql脚本快速建成。
  配置redis环境  安装redis：yum install redis 启动redis：systemctl start redis 默认启动在了6379端口，如需特殊指定可在/etc/redis.conf中修改默认配置 设置开机自启动redis：systemctl enable redis  生成，上传并运行JAR包项目 上传JAR包项目 1 2  mvn clean mvn package   即可把项目打包为JAR包，再通过WINSP上传到服务器。
先新建一个app文件夹，放置项目所有内容：
1 2  mkdir /app chmod 777 /app   新建并编辑application配置文件 由于主机上的mysql密码与本地mysql密码不同，所以在JAR包同一个文件目录下新建application配置文件并指定新的密码，允许JAR项目时该application配置文件优先级是更高的。这里我还指定了用于linux下文件读取上传的目录路径。
1 2 3 4 5 6 7  spring: datasource: password: ...... resources: static-locations: - classpath:static/ - file:/app/static/   1 2 3  [root@VM-0-11-centos app]# chmod -R 777 * [root@VM-0-11-centos app]# ls application.</description>
    </item>
    
    <item>
      <title>Linux配置Java环境</title>
      <link>/posts/2021/07/configuring-java-environment-for-linux/</link>
      <pubDate>Fri, 23 Jul 2021 20:49:56 +0800</pubDate>
      
      <guid>/posts/2021/07/configuring-java-environment-for-linux/</guid>
      <description>速通  ubuntu: /etc/bash.bashrc centos: /etc/bashrc  1 2 3 4 5 6 7 8 9 10  # jdk8.sh # 安装jdk-8u311-linux-x64并配好环境变量的脚本 tar -zxvf jdk-8u311-linux-x64.tar.gz mkdir /usr/local/java mv ./jdk1.8.0_311 /usr/local/java echo &amp;#39;# java env&amp;#39; &amp;gt;&amp;gt; /etc/bash.bashrc echo &amp;#39;export JAVA_HOME=/usr/local/java/jdk1.8.0_311&amp;#39; &amp;gt;&amp;gt; /etc/bash.bashrc echo &amp;#39;export PATH=$JAVA_HOME/bin:$PATH&amp;#39; &amp;gt;&amp;gt; /etc/bash.bashrc echo &amp;#39;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&amp;#39; &amp;gt;&amp;gt; /etc/bash.bashrc source /etc/bash.bashrc   下文是分步解释。
获取JDK 首先下载jdk压缩包，然后解压缩jdk压缩包：
1 2 3 4 5 6  [root@VM-0-11-centos ~]# ls bin jdk-8u311-linux-x64.tar.gz passwd var [root@VM-0-11-centos ~]# tar -zxvf jdk-8u311-linux-x64.</description>
    </item>
    
    <item>
      <title>Docker简单使用过程记录</title>
      <link>/posts/2021/05/docker-simple-use-process-record/</link>
      <pubDate>Wed, 19 May 2021 22:52:52 +0800</pubDate>
      
      <guid>/posts/2021/05/docker-simple-use-process-record/</guid>
      <description>开启docker服务 1 2  [root@VM-0-11-centos ~]# curl -sSL https://get.daocloud.io/docker | sh [root@VM-0-11-centos ~]# systemctl start docker   测试docker 一、下载ubuntu镜像
1 2 3 4 5 6 7 8 9 10 11 12  [root@VM-0-11-centos ~]# docker run ubuntu:15.10 /bin/echo &amp;#34;hello world&amp;#34; Unable to find image &amp;#39;ubuntu:15.10&amp;#39; locally 15.10: Pulling from library/ubuntu 7dcf5a444392: Pull complete 759aa75f3cee: Pull complete 3fa871dc8a2b: Pull complete 224c42ae46e7: Pull complete Digest: sha256:02521a2d079595241c6793b2044f02eecf294034f31d6e235ac4b2b54ffc41f3 Status: Downloaded newer image for ubuntu:15.</description>
    </item>
    
    <item>
      <title>Linux实用操作之shell变量运算</title>
      <link>/posts/2021/04/shell-variable-operation-of-linux-practical-operation/</link>
      <pubDate>Mon, 12 Apr 2021 23:21:41 +0800</pubDate>
      
      <guid>/posts/2021/04/shell-variable-operation-of-linux-practical-operation/</guid>
      <description>算术运算 1 2 3 4 5 6 7 8 9  [root@VM-0-11-centos ~]# a=1 [root@VM-0-11-centos ~]# echo $a 1 [root@VM-0-11-centos ~]# b=$((a*12)) [root@VM-0-11-centos ~]# echo $b 12 [root@VM-0-11-centos ~]# b=$((b+b)) [root@VM-0-11-centos ~]# echo $b 24   比较运算 指令：-eq -ne -lt -gt -ge -le
1 2 3 4 5  a=10 [root@VM-0-11-centos ~]# [ $a -eq 10 ] &amp;amp;&amp;amp; echo yes yes [root@VM-0-11-centos ~]# [ $a -ge 11 ] &amp;amp;&amp;amp; echo yes || echo no no   指令：-a -o</description>
    </item>
    
    <item>
      <title>Linux实用操作之编辑命令与变量</title>
      <link>/posts/2021/04/editing-commands-and-variables-of-linux-practical-operation/</link>
      <pubDate>Mon, 05 Apr 2021 23:01:48 +0800</pubDate>
      
      <guid>/posts/2021/04/editing-commands-and-variables-of-linux-practical-operation/</guid>
      <description>配置环境变量（以Java为例） Linux相关配置文件解析  bashrc部分:   /etc/bashrc: 针对所有用户，每开启一个shell都会执行一次 /etc/skel/.bashrc: 针对所有用户，用于在新建一个用户时默认给用户配置的bashrc ~/.bashrc: 只针对单个用户，每开启一个shell执行一次  profile部分:   /etc/profile: 针对所有用户，首次登录执行一次 /etc/skel/bash_profile: 针对所有用户，用于在新建一个用户时默认给用户配置的bashr_profile ~/.bash_profile: 只针对单个用户，首次登录执行一次  编辑/etc/bashrc文件 也可以选择编辑/etc/profile。
1 2 3 4 5 6 7 8  [root@VM-0-11-centos ~]# vim /etc/bashrc # 进行全局配置 进行添加如下： #JAVA export JAVA_HOME=/usr/local/java/jdk1.8.0_311 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar    使配置文件生效：  1  source /etc/bashrc   验证Java环境： 1 2 3 4 5 6 7 8 9  [root@VM-0-11-centos ~]# java -version java version &amp;#34;1.</description>
    </item>
    
    <item>
      <title>Linux实用操作之文件操作</title>
      <link>/posts/2021/04/file-operation-of-linux-practical-operation/</link>
      <pubDate>Mon, 05 Apr 2021 22:38:46 +0800</pubDate>
      
      <guid>/posts/2021/04/file-operation-of-linux-practical-operation/</guid>
      <description>观察文件信息 1 2  drwxr-xr-x 2 root root 4096 Jan 2 18:41 source 文件类型+文件权限+目录或链接个数+创建者+所在组+文件大小+修改日期+名称   关于文件类型：
 d: directory -: file l: link p: pipeline，管道文件 b: block，块设备文件 c: character，字符设备文件 s: socket，套接字文件  文件创建 1 2 3 4 5 6 7 8 9  [root@VM-0-11-centos d3]# touch f1 [root@VM-0-11-centos d3]# ll total 0 -rw-r--r-- 1 root root 0 Apr 10 00:26 f1 # -d 修改创建时间 [root@VM-0-11-centos d3]# touch -d &amp;#34;2022/4/10 00:27&amp;#34; f1 [root@VM-0-11-centos d3]# ll total 0 -rw-r--r-- 1 root root 0 Apr 10 00:27 f1   目录创建 1 2 3 4  [root@VM-0-11-centos test]# mkdir -p d1/d2/d3 [root@VM-0-11-centos test]# cd d1/d2/d3 [root@VM-0-11-centos d3]# pwd # 查看当前路径 /root/test/d1/d2/d3   文件移动 1 2 3 4 5  [root@VM-0-11-centos test]# ls t1.</description>
    </item>
    
    <item>
      <title>Linux实用操作之进程管理</title>
      <link>/posts/2021/03/process-management-of-linux-practical-operation/</link>
      <pubDate>Wed, 31 Mar 2021 22:55:53 +0800</pubDate>
      
      <guid>/posts/2021/03/process-management-of-linux-practical-operation/</guid>
      <description>查看所有进程 ps -ef  -e : all processes (-A) -f : full-format, including command lines  1 2  [root@VM-0-11-centos ~]# ps -ef | head -n 1 UID PID PPID C STIME TTY TIME CMD   解释如下：
 PPID 父进程ID C 占用CPU百分比 STIME 就是&amp;quot;start time&amp;quot; TTY 进程在哪个终端显示 CMD 命令的名称和参数  ps aux  a: all with tty, including other users (和-a是不同的) u: user-oriented format x: processes without controlling ttys  1 2  [root@VM-0-11-centos ~]# ps -aux | head -n 1 USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND   解释如下：</description>
    </item>
    
    <item>
      <title>Linux实用操作之工作调度</title>
      <link>/posts/2021/03/job-scheduling-of-linux-practical-operation/</link>
      <pubDate>Wed, 31 Mar 2021 22:34:24 +0800</pubDate>
      
      <guid>/posts/2021/03/job-scheduling-of-linux-practical-operation/</guid>
      <description>at命令 create job 1 2 3 4 5 6 7 8 9 10  [root@VM-0-11-centos ~]# at 22:38 at&amp;gt; echo &amp;#34;hello world&amp;#34; &amp;gt; ~/at-test.txt # ctrl D at&amp;gt; &amp;lt;EOT&amp;gt; job 3 at Thu Mar 31 22:38:00 2022 [root@VM-0-11-centos ~]# at now +2 minute at&amp;gt; echo &amp;#34;hello kitty&amp;#34; &amp;gt;&amp;gt; ~/at-test.txt # ctrl D at&amp;gt; &amp;lt;EOT&amp;gt; job 4 at Thu Mar 31 22:39:00 2022   check job 1 2 3 4 5 6 7 8 9 10 11 12 13 14  [root@VM-0-11-centos ~]# ls at-test.</description>
    </item>
    
    <item>
      <title>Linux实用操作之网络管理</title>
      <link>/posts/2021/01/network-management-of-linux-practical-operation/</link>
      <pubDate>Sun, 03 Jan 2021 00:27:58 +0800</pubDate>
      
      <guid>/posts/2021/01/network-management-of-linux-practical-operation/</guid>
      <description>查看内网IP grep抓取inet行，sed删除inet字串和netmask.*字串
1  alias myip=&amp;#34; ifconfig eth0 | grep &amp;#39;inet &amp;#39; | sed &amp;#39;s/inet//g&amp;#39; | sed &amp;#39;s/netmask.*$//g&amp;#39;&amp;#34;   test:
1 2  [root@VM-0-11-centos ~]# myip 172.17.0.11   查看外网IP 1  curl cip.cc   show:
IP : ${my_ip} 地址 : 中国 中国
数据二 : 上海市 | 腾讯云
数据三 : 中国北京北京 | 腾讯
URL : http://www.cip.cc/${my_ip}
查看IP端口状况 1 2 3 4 5 6  [root@VM-0-11-centos ~]# netstat -ntlp Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.</description>
    </item>
    
    <item>
      <title>Linux实用操作之修改默认配置</title>
      <link>/posts/2021/01/modifying-the-default-configuration-of-linux-practical-operation/</link>
      <pubDate>Sun, 03 Jan 2021 00:10:38 +0800</pubDate>
      
      <guid>/posts/2021/01/modifying-the-default-configuration-of-linux-practical-operation/</guid>
      <description>修改vim中tab长度 设置vim中tab长度
1 2 3  vim /etc/vimrc set tabstop=4   修改vim自动缩进长度 1 2 3  vim /etc/vimrc set shiftwidth=4   禁用烦人的蜂鸣声  禁用bash蜂鸣声  1 2 3  vim /etc/inputrc set bell-style none   禁用vim蜂鸣声  1 2 3  vim /etc/vimrc set noeb vb t_vb=   (vb即visual bell用屏幕的闪烁代替响铃 t_vb就是闪烁设置为空，即不表现出闪烁)</description>
    </item>
    
    <item>
      <title>SSH免密且免IP登录远程主机的方法以及遇到的一些问题</title>
      <link>/posts/2020/11/ssh-password-free-and-ip-free-login-methods-to-remote-hosts-and-some-problems-encountered/</link>
      <pubDate>Tue, 17 Nov 2020 17:56:03 +0800</pubDate>
      
      <guid>/posts/2020/11/ssh-password-free-and-ip-free-login-methods-to-remote-hosts-and-some-problems-encountered/</guid>
      <description>问题的提出： 我们可以通过指令：
1  ssh 用户名@IP   登录远程主机，但是每次都要输入ip和密码，有点麻烦，为了节省时间，我们需要寻求提高效率的办法！
通过了解，我们可以通过RSA，即非对称式的加密方法实现免密操作，而免IP只需要在config文件中进行配置即可。
实现免ip登录：   新建config文件
若window下操作，则在.ssh目录中新建一个名为config的文件，而linux下直接编辑ssh_config文件。
  编辑代替名以及IP，端口号，用户。
  1 2 3 4  Host 输入代替名 HostName 输入IP Port 输入端口号 User 输入用户   这样，即可通过
1  ssh 代替名   进行登录咯！
接着我们实现免密登录：  在本地生成密钥：  1  ssh-keygen   并选择生成在.ssh目录下即可，获得一把公钥和私钥。
将名字带.pub的就是公钥了。
 将公钥发给远程主机  通过命令
1  ssh-copy-id -i .ssh/公钥 用户名@IP   即可发送给远程主机。
在window10中可能出现以下错误：
1  ssh-copy-id : 无法将“ssh-copy-id”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。   则可先于命令行中运行以下代码：</description>
    </item>
    
  </channel>
</rss>
