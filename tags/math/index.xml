<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>math on Norwegian Wood</title>
    <link>/tags/math/</link>
    <description>Recent content in math on Norwegian Wood</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Jzh</copyright>
    <lastBuildDate>Thu, 21 Jul 2022 20:44:54 +0800</lastBuildDate><atom:link href="/tags/math/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>理解快速幂运算并进行应用</title>
      <link>/posts/2022/07/understand-and-apply-fast-power-operation/</link>
      <pubDate>Thu, 21 Jul 2022 20:44:54 +0800</pubDate>
      
      <guid>/posts/2022/07/understand-and-apply-fast-power-operation/</guid>
      <description>快速幂运算的解释 问n是否满足$x^n \mod n = x (1 &amp;lt; x &amp;lt; n)$？
先由一个例子引入：
$3^{11} = 3 \times 9^5 = 3 \times 9 \times 81^2 = 3 \times 9 \times 6561^1$
$result = 3 \times 9 \times 6561 = 3^{2^0} \times 3^{2^1} \times 3^{2^3}$
可见发现这次运算中，幂的结果等于变化中所有当指数为奇数时底数之积。其中，每次运算均发生指数除二（对应二进制右移一位），且当该指数为奇数时，原式乘上底数。
而这个过程其实相当于一个数进行模2取余求二进制数的过程，每次都除2，当模2余1，即对应二进制最末位为1时乘上底数，则由此可以推知快速幂运算的算法过程。
这个结论是可以证明的，如下：
对于任何十进制正整数n，设其对应二进制数为&amp;quot;$b_m&amp;hellip;b_3b_2b_1$&amp;quot;，则有：
 二进制转十进制：$n = 1b_1+2b_2+4b_3+&amp;hellip;+2^{m-1}b_m$； 幂的二进制展开：$x^n = x^{1b_1}x^{2b_2}x^{4b_3}&amp;hellip;x^{2^{m-1}b_m}$。  则对于$x^n$的求解，可以转化为：
 计算$x^1,x^2,x^4&amp;hellip;x^{m-1}$的值，相当于$x=x^2$的过程； 获取二进制各位$b_1,b_2,b_3,&amp;hellip;,b_m$的值，相当于模2求余的过程。  上述过程中，当$b_i=0$时，$x^{2^{i-1}b_i}=1$，反之为$x^{2^{i-1}}$，由此可以顺利计算$x^n$。
相应代码：
1 2 3 4 5 6 7 8 9 10  typedef long long ll; ll mod_pow(ll x, ll n, ll mod) { ll res = 1; while(n &amp;gt; 0) { if(n &amp;amp; 1 == 1) res = res * x % mod; // 一个数&amp;amp;1的结果就是取该数二进制的最末位 	x = x * x % mod; n &amp;gt;&amp;gt;= 1; }	return res; }   注意，运用位运算可以提高效率！</description>
    </item>
    
    <item>
      <title>关于辗转相除法和扩展欧几里得算法</title>
      <link>/posts/2020/07/on-rolling-division-and-extended-euclidean-algorithm/</link>
      <pubDate>Tue, 21 Jul 2020 20:48:53 +0800</pubDate>
      
      <guid>/posts/2020/07/on-rolling-division-and-extended-euclidean-algorithm/</guid>
      <description>gcd辗转相除法求最大公约数 思路：反复交换取余，直到小的数为0。
1 2 3 4  int gcd(int a, int b){ if(b == 0) return a; return gcd(b, a % b); }   exgcd扩展欧几里得算法 先介绍贝祖定理：
若a,b为整数，则一定存在整数x,y，使得$ax + by = gcd(a,b)$。
即若$ax + by = m$有解，则m一定为gcd(a,b)的若干倍。
下面是一道题：
有a, -a, b, -b四个整数，各用几次可以使得$ax + by = 1$?
由上述思想则可知gcd(a,b)等于1，可编写一个返回值为gcd(a,b)同时递归计算x和y的函数。
关于求出x和y推导过程：
由$ax + by = gcd(a,b)$ (1)
通过辗转相除法的思想得：$bx_1 + (a \mod b) y_1 = gcd(a,b)$
由$a \mod b = a - (a \div b) \times b$带入得:</description>
    </item>
    
    <item>
      <title>有关素数的一些算法</title>
      <link>/posts/2020/07/some-algorithms-about-prime-numbers/</link>
      <pubDate>Tue, 21 Jul 2020 20:43:04 +0800</pubDate>
      
      <guid>/posts/2020/07/some-algorithms-about-prime-numbers/</guid>
      <description>埃氏筛法 问1000000000000以内有多少个素数？
运用朴素算法必TLE，这时考虑埃氏筛法。
算法思路：
 建立is_prime[]数组，初始化为true； 从2开始筛取，(注意从2开始很重要，因为2为素数，否则需要改变相应后续操作)，若为true，则继续判断是否为素数，若为素数，则将所有该素数的倍数置为false。  相应代码：
1 2 3 4 5 6 7 8 9 10 11 12 13  bool is_prime[MAXN]; //返回n以内的素数个数 int sieve(int n) { int c = 0; for (int i = 2; i &amp;lt;= n; ++i) is_prime[i] = true; for (int i = 2; i &amp;lt;= n; ++i) if (is_prime[i]) { c++; for (int j = 2 * i; j &amp;lt;= n; j += i) is_prime[j] = false; } return c; }   区间筛法 问[21479862, 21499877)之间有多少个素数？</description>
    </item>
    
    <item>
      <title>Matlab基本用法整理</title>
      <link>/posts/2020/02/basic-usage-sorting-of-matlab/</link>
      <pubDate>Thu, 06 Feb 2020 20:41:12 +0800</pubDate>
      
      <guid>/posts/2020/02/basic-usage-sorting-of-matlab/</guid>
      <description>基本语法方面 提取矩阵某行或某列 1  A(:, [2 3]) 返回第2和第3列   获取随机数 1  randi(100); % 1 到 100 之间的随机整数   初始化数组 1  zeros(1, 30); % 1行30列的全0数组   控制语句 1 2 3 4 5 6 7 8 9 10  for i = 0 : 100 for j = 1 : 10 if (...)  ... else ... end end ... end   格式化输出 1  fprintf(&amp;#34;若选手选择改变，则成功次数为：%d, 成功率为：%f\n&amp;#34;, count, count / SUM);   初等数学方面 求解方程组 注：solve已经改版，不可传入字符串</description>
    </item>
    
  </channel>
</rss>
