<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on Norwegian Wood</title>
    <link>/tags/algorithm/</link>
    <description>Recent content in algorithm on Norwegian Wood</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Jzh</copyright>
    <lastBuildDate>Thu, 21 Jul 2022 20:44:54 +0800</lastBuildDate><atom:link href="/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>理解快速幂运算并进行应用</title>
      <link>/posts/2022/07/understand-and-apply-fast-power-operation/</link>
      <pubDate>Thu, 21 Jul 2022 20:44:54 +0800</pubDate>
      
      <guid>/posts/2022/07/understand-and-apply-fast-power-operation/</guid>
      <description>快速幂运算的解释 问n是否满足$x^n \mod n = x (1 &amp;lt; x &amp;lt; n)$？
先由一个例子引入：
$3^{11} = 3 \times 9^5 = 3 \times 9 \times 81^2 = 3 \times 9 \times 6561^1$
$result = 3 \times 9 \times 6561 = 3^{2^0} \times 3^{2^1} \times 3^{2^3}$
可见发现这次运算中，幂的结果等于变化中所有当指数为奇数时底数之积。其中，每次运算均发生指数除二（对应二进制右移一位），且当该指数为奇数时，原式乘上底数。
而这个过程其实相当于一个数进行模2取余求二进制数的过程，每次都除2，当模2余1，即对应二进制最末位为1时乘上底数，则由此可以推知快速幂运算的算法过程。
这个结论是可以证明的，如下：
对于任何十进制正整数n，设其对应二进制数为&amp;quot;$b_m&amp;hellip;b_3b_2b_1$&amp;quot;，则有：
 二进制转十进制：$n = 1b_1+2b_2+4b_3+&amp;hellip;+2^{m-1}b_m$； 幂的二进制展开：$x^n = x^{1b_1}x^{2b_2}x^{4b_3}&amp;hellip;x^{2^{m-1}b_m}$。  则对于$x^n$的求解，可以转化为：
 计算$x^1,x^2,x^4&amp;hellip;x^{m-1}$的值，相当于$x=x^2$的过程； 获取二进制各位$b_1,b_2,b_3,&amp;hellip;,b_m$的值，相当于模2求余的过程。  上述过程中，当$b_i=0$时，$x^{2^{i-1}b_i}=1$，反之为$x^{2^{i-1}}$，由此可以顺利计算$x^n$。
相应代码：
1 2 3 4 5 6 7 8 9 10  typedef long long ll; ll mod_pow(ll x, ll n, ll mod) { ll res = 1; while(n &amp;gt; 0) { if(n &amp;amp; 1 == 1) res = res * x % mod; // 一个数&amp;amp;1的结果就是取该数二进制的最末位 	x = x * x % mod; n &amp;gt;&amp;gt;= 1; }	return res; }   注意，运用位运算可以提高效率！</description>
    </item>
    
    <item>
      <title>图的着色问题汇总</title>
      <link>/posts/2020/12/summary-of-coloring-problems-of-graphs/</link>
      <pubDate>Sat, 05 Dec 2020 12:34:05 +0800</pubDate>
      
      <guid>/posts/2020/12/summary-of-coloring-problems-of-graphs/</guid>
      <description>二分图问题 能否只用2种颜色对一个图上色，并且使得共边顶点不同色？
代码解决：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  vector&amp;lt;int&amp;gt; G[MAX_V]; int vertexes; int edges; int color[MAX_V]; //二分图，颜色为1或-1 bool dfs(int v, int c) { color[v] = c; for (int i = 0; i &amp;lt; G[v].size(); i++) { if (color[G[v][i]] == c) return false; if (color[G[v][i]] == 0 &amp;amp;&amp;amp; !dfs(G[v][i], -c)) return false; } return true; } void solve() { for (int i = 0; i &amp;lt; vertexes; i++) { if (color[i] == 0) { if (!</description>
    </item>
    
    <item>
      <title>求解有向图和无向图中是否存在环的方法</title>
      <link>/posts/2020/12/a-method-to-solve-whether-there-are-rings-in-directed-graphs-and-undirected-graphs/</link>
      <pubDate>Wed, 02 Dec 2020 23:50:44 +0800</pubDate>
      
      <guid>/posts/2020/12/a-method-to-solve-whether-there-are-rings-in-directed-graphs-and-undirected-graphs/</guid>
      <description>求解无向图中是否存在环 无向图中是否存在环，可以通过DFS来实现。
由于他是无向图，所以每次开始一次新的递归即进入一个新的连通子图，在该次dfs中可以通过判断新纳入的结点是否与所在连通子图中其他已经访问过的结点存在边，如果存在则证明存在环。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  int mat[maxn][maxn], vis[maxn]; int dfs(int v) { vis[v] = 1; for (int i = 0; i &amp;lt; num; i++) if (mat[v][i]) { if (vis[i] || dfs(i)) return 1; // 该连通子图新纳入的结点与原连通子图中的某一结点有边，即产生了环  } return 0; } memset(vis, 0, sizeof(vis)); int flag = 0; // 无环标志 for (int j = 0; j &amp;lt; num; j++) { if (!</description>
    </item>
    
    <item>
      <title>矩阵快速幂的介绍及其应用</title>
      <link>/posts/2020/11/introduction-and-application-of-matrix-fast-power/</link>
      <pubDate>Wed, 18 Nov 2020 23:47:15 +0800</pubDate>
      
      <guid>/posts/2020/11/introduction-and-application-of-matrix-fast-power/</guid>
      <description>矩阵快速幂介绍 题目描述
给定n×n的矩阵A，求 A^k。
输入格式
第一行两个整数 n,k 接下来n行，每行n个整数，第i行的第j个数表示Aij。
输出格式
输出 A^k
共n行，每行n个数，第i行第j个数表示Aij, 每个元素对 10^9+7取模。
1 &amp;lt;= n &amp;lt;= 100
0 &amp;lt;= k &amp;lt;= 10 ^ 12
|Aij| &amp;lt;= 1000
分析：
本质上就是快速幂运算，只是底数变成了一个矩阵。
快速幂运算板子： 1 2 3 4 5 6 7 8 9 10  typedef long long ll; ll mod_pow(ll x, ll n, ll mod){ ll res = 1; while(n &amp;gt; 0){ if(n &amp;amp; 1 == 1) res = res * x % mod; // 如果指数是奇数则乘上底数 	x = x * x % mod; // 底数平方 	n &amp;gt;&amp;gt;= 1; // 指数除二 	}	return res; }   由此易得：</description>
    </item>
    
    <item>
      <title>最短路问题汇总</title>
      <link>/posts/2020/11/summary-of-shortest-path-problems/</link>
      <pubDate>Tue, 17 Nov 2020 17:55:32 +0800</pubDate>
      
      <guid>/posts/2020/11/summary-of-shortest-path-problems/</guid>
      <description>注意，这里为了方便描述算法，所以都用了最易理解的邻接矩阵来写，比赛中为了追求效率，一般将邻接矩阵改为链式前向星或者邻接表。
迪杰斯特拉算法 O(V^2) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  const int MAXN = 100; const int INF = 0x3f3f3f3f; // 有向无环图 DAG int V, E; // 顶点数和边数 int graph[MAXN][MAXN]; // DAG邻接矩阵，初始值为INF，不可达为INF，否则为cost值 int d[MAXN]; // 从某点s出发到其它任意结点的最短路径长度，初始值为INF int visited[MAXN]; // 某点是否访问过，访问过则为1否则为0  // 初始化图 void init() { memset(graph, 0x3f, sizeof(graph)); cin &amp;gt;&amp;gt; V &amp;gt;&amp;gt; E; int from, to, cost; for (int i = 0 ; i &amp;lt; E; i++) { cin &amp;gt;&amp;gt; from &amp;gt;&amp;gt; to &amp;gt;&amp;gt; cost; graph[from][to] = cost; } } // 迪杰斯特拉算法求解最短路，针对点展开 void Dijkstra(int s) { memset(d, 0x3f, sizeof(d)); memset(visited, 0, sizeof(visited)); visited[s] = 1; for(int i = 0; i &amp;lt; V; i++) d[i] = graph[s][i]; d[s] = 0; int k, min_cost; // 无负边时最多更新n-1(其他结点数)次 	for(int i = 0; i &amp;lt; V - 1; i++){ min_cost = INF; // 寻找最未被访问的且权值最小的路径，需要优化的地方 	for(int j = 0; j &amp;lt; V; j++){ if(!</description>
    </item>
    
    <item>
      <title>关于辗转相除法和扩展欧几里得算法</title>
      <link>/posts/2020/07/on-rolling-division-and-extended-euclidean-algorithm/</link>
      <pubDate>Tue, 21 Jul 2020 20:48:53 +0800</pubDate>
      
      <guid>/posts/2020/07/on-rolling-division-and-extended-euclidean-algorithm/</guid>
      <description>gcd辗转相除法求最大公约数 思路：反复交换取余，直到小的数为0。
1 2 3 4  int gcd(int a, int b){ if(b == 0) return a; return gcd(b, a % b); }   exgcd扩展欧几里得算法 先介绍贝祖定理：
若a,b为整数，则一定存在整数x,y，使得$ax + by = gcd(a,b)$。
即若$ax + by = m$有解，则m一定为gcd(a,b)的若干倍。
下面是一道题：
有a, -a, b, -b四个整数，各用几次可以使得$ax + by = 1$?
由上述思想则可知gcd(a,b)等于1，可编写一个返回值为gcd(a,b)同时递归计算x和y的函数。
关于求出x和y推导过程：
由$ax + by = gcd(a,b)$ (1)
通过辗转相除法的思想得：$bx_1 + (a \mod b) y_1 = gcd(a,b)$
由$a \mod b = a - (a \div b) \times b$带入得:</description>
    </item>
    
    <item>
      <title>有关素数的一些算法</title>
      <link>/posts/2020/07/some-algorithms-about-prime-numbers/</link>
      <pubDate>Tue, 21 Jul 2020 20:43:04 +0800</pubDate>
      
      <guid>/posts/2020/07/some-algorithms-about-prime-numbers/</guid>
      <description>埃氏筛法 问1000000000000以内有多少个素数？
运用朴素算法必TLE，这时考虑埃氏筛法。
算法思路：
 建立is_prime[]数组，初始化为true； 从2开始筛取，(注意从2开始很重要，因为2为素数，否则需要改变相应后续操作)，若为true，则继续判断是否为素数，若为素数，则将所有该素数的倍数置为false。  相应代码：
1 2 3 4 5 6 7 8 9 10 11 12 13  bool is_prime[MAXN]; //返回n以内的素数个数 int sieve(int n) { int c = 0; for (int i = 2; i &amp;lt;= n; ++i) is_prime[i] = true; for (int i = 2; i &amp;lt;= n; ++i) if (is_prime[i]) { c++; for (int j = 2 * i; j &amp;lt;= n; j += i) is_prime[j] = false; } return c; }   区间筛法 问[21479862, 21499877)之间有多少个素数？</description>
    </item>
    
  </channel>
</rss>
